#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodeserver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5200');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`listening on :${port}`));
server.on('error', onError);
server.on('listening', onListening);



/**
 * Listen on Socket.io
 */

const io = require('socket.io')(server, {
  allowEIO3: true, // false by default
  cors: { origin: "*" }
});

// module.exports= io;

io.on('connection', (socket) => { /* socket object may be used to send specific messages to the new connected client */
  // const CONNECTED_USERS = [];


  //TODO: Check who is socket and according to that:
  console.log('socket io is connected');//, socket);
  io.emit("toExtension", "hello from server");
  // setupSelectedInterval(socket);

  // socket.on("interval", ({ from, to, msg, date, uId }) => {
  //   console.log('interval socket');
  // ChatMSG.CREATE([from, to, msg, date, uId])
  // socket.to(to).emit("private message", {
  //   message, date,
  //   from, to
  // });
  socket.on('toExtension', function (obj) {
    // csInterface.evalScript(command);
    console.log(obj.text)
    console.log(obj.file)
    // io.emit("b", "hello again from server");
    //try typing app.activeDocument.close() in the browser
  });



  socket.on("try", x => {
    console.log(x);
    io.emit("hello again");
  })

  socket.on("b", x => {
    console.log(x)
  })
  // })
  // socket.on("delete_msg", ({ }) => {
  //   console.log('delete_msg');
  //   io.emit("delete_msg");
  // })
  // })
});


const setupSelectedInterval = (socket) => {
  let time = 0;
  setInterval(() => {
    io.emit("interval", { data: 'hello' });
    console.log(++time)
  }, 5000);
}










/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

